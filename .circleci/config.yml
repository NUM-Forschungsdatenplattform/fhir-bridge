version: 2.1

# OVERVIEW - What this CI pipeline does:
#
# 1. So far this pipeline consists of one workflow only, which
#    - compiles FHIR-bridge code
#    - starts ehrbase & postgresql containers via testcontainers's
#      Docker Compose Module during Maven's verify phase (`mvn clean verify`)
#    - runs (Java) integration tests
#    - creates code coverage report w/ Jacoco
#    - performes sonarcoud.io code analysis


workflows:

  # WORKFLOW 1/1 Build, Test & Analyze FHIR-bridge code
  build_and_test_fhirbridge:
    jobs:
      - build-and-test-fhirbridge:
            context: org-global
        #   filters:
        #     branches:
        #       ignore:
        #         - master
        #         - develop
        #         - release







jobs:
    #           88    ,ad8888ba,    88888888ba    ad88888ba
    #           88   d8"'    `"8b   88      "8b  d8"     "8b
    #           88  d8'        `8b  88      ,8P  Y8,
    #           88  88          88  88aaaaaa8P'  `Y8aaaaa,
    #           88  88          88  88""""""8b,    `"""""8b,
    #           88  Y8,        ,8P  88      `8b          `8b
    #   88,   ,d88   Y8a.    .a8P   88      a8P  Y8a     a8P
    #    "Y8888P"     `"Y8888Y"'    88888888P"    "Y88888P"
    
    
    build-and-test-fhirbridge:
        description: Build and test FHIR-bridge, analyze code, upload results to sonarcloud.io
        executor: vm-ubuntu-1604
        steps:
            - checkout
            - cache-out-fhirbridge-m2-dependencies
            - mvn-clean-verify
            - cache-in-fhirbridge-m2-dependencies
            # - collect-fhirbride-unittest-results
            - collect-fhirbridge-integrationtest-results
            - save-fhirbridge-test-results
            - save-jacoco-coverage-report
            - sonarcloud/scan:
                cache_version: 1







commands:
    #     ,ad8888ba,    ,ad8888ba,    88b           d88  88b           d88         db         888b      88  88888888ba,     ad88888ba
    #    d8"'    `"8b  d8"'    `"8b   888b         d888  888b         d888        d88b        8888b     88  88      `"8b   d8"     "8b
    #   d8'           d8'        `8b  88`8b       d8'88  88`8b       d8'88       d8'`8b       88 `8b    88  88        `8b  Y8,
    #   88            88          88  88 `8b     d8' 88  88 `8b     d8' 88      d8'  `8b      88  `8b   88  88         88  `Y8aaaaa,
    #   88            88          88  88  `8b   d8'  88  88  `8b   d8'  88     d8YaaaaY8b     88   `8b  88  88         88    `"""""8b,
    #   Y8,           Y8,        ,8P  88   `8b d8'   88  88   `8b d8'   88    d8""""""""8b    88    `8b 88  88         8P          `8b
    #    Y8a.    .a8P  Y8a.    .a8P   88    `888'    88  88    `888'    88   d8'        `8b   88     `8888  88      .a8P   Y8a     a8P
    #     `"Y8888Y"'    `"Y8888Y"'    88     `8'     88  88     `8'     88  d8'          `8b  88      `888  88888888Y"'     "Y88888P"
    
    
    mvn-clean-verify:
        description: | 
            Executes `mvn clean verify`
            testcontainers(.org) dependency ensures that ehrbase server
            and postgresql db are started before integration tests a run.
        steps:
            - openjdk-install/openjdk:
                version: 11
            - install-maven
            - run:
                command: |
                    ls -la
                    mvn --version
                    java --version
                    mvn clean verify


    cache-out-fhirbridge-m2-dependencies:
        steps:
          - run:
              name: Generate Cache Checksum for FHIR-bridge Dependencies
              command: find . -name 'pom.xml' | sort | xargs cat > /tmp/fhirbridge_maven_cache_seed
          - restore_cache:
              key: fhirbridge-


    cache-in-fhirbridge-m2-dependencies:
        steps:
          - save_cache:
              key: fhirbridge-{{ checksum "/tmp/fhirbridge_maven_cache_seed" }}
              paths:
              - ~/.m2


    # collect-fhirbridge-unittest-results:
    #     steps:
    #       - run:
    #           name: Save unit test results
    #           command: |
    #             mkdir -p ~/test-results/unit-tests/
    #             find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/unit-tests/ \;
    #             find . -type f -regex ".*/target/surefire-reports/.*txt" -exec cp {} ~/test-results/unit-tests/ \;
    #           when: always


    collect-fhirbridge-integrationtest-results:
        steps:
          - run:
              name: Save integration test results
              command: |
                mkdir -p ~/test-results/integration-tests/
                find . -type f -regex ".*/target/failsafe-reports/.*xml" -exec cp {} ~/test-results/integration-tests/ \;
                find . -type f -regex ".*/target/failsafe-reports/.*txt" -exec cp {} ~/test-results/integration-tests/ \;
              when: always


    save-fhirbridge-test-results:
        steps:
          - store_test_results:
              path: ~/test-results
          - store_artifacts:
              path: ~/test-results


    save-jacoco-coverage-report:
        description: |
          Uploads Jacoco coverage report as circleci artifact
        steps:
          - store_artifacts:
              path: target/site/jacoco


    save-fhirbridge-workspace:
        steps:
          - persist_to_workspace:
              root: /home/circleci
              paths:
                - .m2
                - projects
    
    
    restore-fhirbridge-workspace:
        description: |
          Restores any file / folder that was previously persisted w/ 'persist_to_workspace'.
          NOTE: best practise is to persist files or folders very selectively.
                Do not persist root or the whole workspace at one, otherwise concurrent jobs
                may fail to restore that stuff.
        steps:
          - attach_workspace:
              at: /home/circleci/





# ///////////////////////////////////////////////////////////////////////////
# /// HELPER COMMANDS                                                    ///
# ///////////////////////////////////////////////////////////////////////////

    install-maven:
        description: Installs Maven tool (but only if it's not already installed)
        steps:
            - run: 
                name: Install Maven tool
                command: |
                    [ -f /usr/bin/mvn ] && echo "Maven is already installed." || sudo apt install maven -y





# ///////////////////////////////////////////////////////////////////////////
# /// CIRCLECI META                                                       ///
# ///////////////////////////////////////////////////////////////////////////


orbs:
    openjdk-install: cloudesire/openjdk-install@1.2.3
    sonarcloud: sonarsource/sonarcloud@1.0.2
  

executors:
    docker-python3-java11:
        working_directory: ~/projects
        docker:
            - image: circleci/python@sha256:e1c98a85c5ee62ac52a2779fe5abe2677f021c8e3158e4fb2d569c7b9c6ac073

    docker-py3-java11-postgres:
        working_directory: ~/projects
        docker:
            - image: circleci/python@sha256:e1c98a85c5ee62ac52a2779fe5abe2677f021c8e3158e4fb2d569c7b9c6ac073
            - image: ehrbaseorg/ehrbase-postgres:10
              environment:
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: postgres

    vm-ubuntu-1604:
        working_directory: ~/projects
        machine:
            # image: ubuntu-1604:201903-01
            image: ubuntu-1604:202007-01        # what's inside:
                                                # Ubuntu 16.04
                                                # Docker v19.03.12
                                                # Docker Compose v1.26.1
