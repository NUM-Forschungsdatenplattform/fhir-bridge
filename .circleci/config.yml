version: 2.1

# OVERVIEW - What this CI pipeline does:
#
# 1. So far this pipeline consists of one workflow only, which
#    - clones ehrbase repo
#    - builds ehrbase server from develop branch
#    - starts ehrbase server (postgresql db is included in used docker executor,
#                             see executors section at the buttom)
#    - builds FHIR-bridge code
#    - runs (Java) integration tests
#    - creates code coverage report w/ Jacoco
#    - performes sonarcoud.io code analysis


workflows:

  # WORKFLOW 1/1 Build, Test & Analyze FHIR-bridge code
  build_and_test_fhirbridge:
    jobs:
      - build-and-test-fhirbridge:
            context: org-global
        #   filters:
        #     branches:
        #       ignore:
        #         - master
        #         - develop
        #         - release







jobs:
    #           88    ,ad8888ba,    88888888ba    ad88888ba
    #           88   d8"'    `"8b   88      "8b  d8"     "8b
    #           88  d8'        `8b  88      ,8P  Y8,
    #           88  88          88  88aaaaaa8P'  `Y8aaaaa,
    #           88  88          88  88""""""8b,    `"""""8b,
    #           88  Y8,        ,8P  88      `8b          `8b
    #   88,   ,d88   Y8a.    .a8P   88      a8P  Y8a     a8P
    #    "Y8888P"     `"Y8888Y"'    88888888P"    "Y88888P"
    
    
    build-and-test-fhirbridge:
        description: Build and test FHIR-bridge, analyze code, upload results to sonarcloud.io
        executor: docker-py3-java11-postgres
        # executor: machine-ubuntu-2004
        steps:
            - checkout
            - setup-database
            - install-maven
            - git-clone-ehrbase-repo
            - cache-out-fhirbridge-m2-dependencies
            - cache-out-ehrbase-m2-dependencies
            - build-ehrbase
            - start-ehrbase-server
            - build-and-test-fhirbridge
            - cache-in-ehrbase-m2-dependencies
            - cache-in-fhirbridge-m2-dependencies
            # - collect-fhirbride-unittest-results
            # - collect-fhirbridge-integrationtest-results
            # - save-fhirbridge-test-results
            # - save-jacoco-coverage-report
            # - sonarcloud/scan:
            #     cache_version: 1







commands:
    #     ,ad8888ba,    ,ad8888ba,    88b           d88  88b           d88         db         888b      88  88888888ba,     ad88888ba
    #    d8"'    `"8b  d8"'    `"8b   888b         d888  888b         d888        d88b        8888b     88  88      `"8b   d8"     "8b
    #   d8'           d8'        `8b  88`8b       d8'88  88`8b       d8'88       d8'`8b       88 `8b    88  88        `8b  Y8,
    #   88            88          88  88 `8b     d8' 88  88 `8b     d8' 88      d8'  `8b      88  `8b   88  88         88  `Y8aaaaa,
    #   88            88          88  88  `8b   d8'  88  88  `8b   d8'  88     d8YaaaaY8b     88   `8b  88  88         88    `"""""8b,
    #   Y8,           Y8,        ,8P  88   `8b d8'   88  88   `8b d8'   88    d8""""""""8b    88    `8b 88  88         8P          `8b
    #    Y8a.    .a8P  Y8a.    .a8P   88    `888'    88  88    `888'    88   d8'        `8b   88     `8888  88      .a8P   Y8a     a8P
    #     `"Y8888Y"'    `"Y8888Y"'    88     `8'     88  88     `8'     88  d8'          `8b  88      `888  88888888Y"'     "Y88888P"
    
    setup-database:
        description: Setup ehrbase database
        steps:
            - run:
                name: Setup database
                # background: true
                command: |
                    docker run  -d --name ehrdb \
                                -e POSTGRES_USER=$POSTGRES_USER \
                                -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD -d \
                                -e DISABLE_SECURITY=true \
                                -p 5432:5432 ehrbaseorg/ehrbase-database-docker:11.5


    git-clone-ehrbase-repo:
        steps:
            - run:
                name: CLONE EHRBASE REPO
                command: |
                    git clone git@github.com:ehrbase/ehrbase.git
                    ls -la


    build-ehrbase:
        steps:
            - run:
                name: BUILD EHRBASE SERVER
                command: |
                    ls -la
                    cd ehrbase
                    mvn package -Dmaven.javadoc.skip=true -Dmaven.test.skip


    start-ehrbase-server:
        steps:
            - run:
                name: START EHRBASE SERVER
                background: true
                command: |
                    ls -la
                    cd ehrbase
                    EHRbase_VERSION=$(mvn -q -Dexec.executable="echo" \
                                             -Dexec.args='${project.version}' \
                                             --non-recursive exec:exec)
                    echo ${EHRbase_VERSION}
                    java -jar "application/target/application-0.13.0.jar" > log


    build-and-test-fhirbridge:
        description: | 
            Executes `mvn clean verify`
        steps:
            - run:
                name: WAIT FOR EHRBASE SERVER TO BE READY
                command: |
                  jps
                  ls -la
                  timeout=30
                  while [ ! -f ehrbase/log ];
                  do
                    echo "Waiting for file ehrbase/log ..."
                    if [ "$timeout" == 0 ]; then
                      echo "ERROR: timed out while waiting for file ehrbase/log"
                      exit 1
                    fi
                    sleep 1
                    ((timeout--))
                  done
                  if ! tail -f ehrbase/log | timeout 30s grep -m 1 "Started EhrBase in"; then
                    echo "WARNING: Did not see a startup message even after waiting 30s" >&2
                  fi
                  jps
            - run:
                name: BUILD FHIR-BRIDGE
                command: |
                    ls -la
                    mvn clean verify -Dmaven.javadoc.skip=true


    cache-out-fhirbridge-m2-dependencies:
        steps:
            - run:
                name: Generate Cache Checksum for FHIR-bridge Dependencies
                command: find . -name 'pom.xml' | sort | xargs cat > /tmp/fhirbridge_maven_cache_seed
            - restore_cache:
                key: fhirbridge-


    cache-in-fhirbridge-m2-dependencies:
        steps:
            - save_cache:
                key: fhirbridge-{{ checksum "/tmp/fhirbridge_maven_cache_seed" }}
                paths:
                - ~/.m2
    
    cache-out-ehrbase-m2-dependencies:
        steps:
            - run:
                name: Generate Cache Checksum for EHRbase Dependencies
                command: find ~/projects/ehrbase -name 'pom.xml' | sort | xargs cat > /tmp/ehrbase_maven_cache_seed
            - restore_cache:
                key: EHRbase-v1-
    
    cache-in-ehrbase-m2-dependencies:
        steps:
            - save_cache:
                key: EHRbase-v1-{{ checksum "/tmp/ehrbase_maven_cache_seed" }}
                paths:
                    - ~/.m2


    # collect-fhirbridge-unittest-results:
    #     steps:
    #       - run:
    #           name: Save unit test results
    #           command: |
    #             mkdir -p ~/test-results/unit-tests/
    #             find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/unit-tests/ \;
    #             find . -type f -regex ".*/target/surefire-reports/.*txt" -exec cp {} ~/test-results/unit-tests/ \;
    #           when: always


    collect-fhirbridge-integrationtest-results:
        steps:
          - run:
              name: Save integration test results
              command: |
                mkdir -p ~/test-results/integration-tests/
                find . -type f -regex ".*/target/failsafe-reports/.*xml" -exec cp {} ~/test-results/integration-tests/ \;
                find . -type f -regex ".*/target/failsafe-reports/.*txt" -exec cp {} ~/test-results/integration-tests/ \;
              when: always


    save-fhirbridge-test-results:
        steps:
          - store_test_results:
              path: ~/test-results
          - store_artifacts:
              path: ~/test-results


    save-jacoco-coverage-report:
        description: |
          Uploads Jacoco coverage report as circleci artifact
        steps:
          - store_artifacts:
              path: target/site/jacoco


    save-fhirbridge-workspace:
        steps:
          - persist_to_workspace:
              root: /home/circleci
              paths:
                - .m2
                - projects
    
    
    restore-fhirbridge-workspace:
        description: |
          Restores any file / folder that was previously persisted w/ 'persist_to_workspace'.
          NOTE: best practise is to persist files or folders very selectively.
                Do not persist root or the whole workspace at one, otherwise concurrent jobs
                may fail to restore that stuff.
        steps:
          - attach_workspace:
              at: /home/circleci/





# ///////////////////////////////////////////////////////////////////////////
# /// HELPER COMMANDS                                                    ///
# ///////////////////////////////////////////////////////////////////////////

    install-maven:
        description: Installs Maven tool (but only if it's not already installed)
        steps:
            - run: 
                name: Install Maven tool
                command: |
                    sudo killall -9 apt-get || true
                    sudo apt -y update
                    [ -f /usr/bin/mvn ] && echo "Maven is already installed." || sudo apt install maven -y





# ///////////////////////////////////////////////////////////////////////////
# /// CIRCLECI META                                                       ///
# ///////////////////////////////////////////////////////////////////////////


orbs:
    openjdk-install: cloudesire/openjdk-install@1.2.3
    sonarcloud: sonarsource/sonarcloud@1.0.2
  

executors:
    docker-python3-java11:
        working_directory: ~/projects
        docker:
            # - image: circleci/python@sha256:e1c98a85c5ee62ac52a2779fe5abe2677f021c8e3158e4fb2d569c7b9c6ac073
            - image: circleci/python:3.8.5-node-browsers

    docker-py3-java11-postgres:
        working_directory: ~/projects
        docker:
            - image: circleci/python:3.8.5-node-browsers
            - image: ehrbaseorg/ehrbase-postgres:10
              environment:
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: postgres

    machine-ubuntu-2004:
        description: |
            Ubuntu 20.04 VM (machine executor)
            - openjdk 1.8
            - openjdk 11.0.8 (default)
            - maven 3.6.3
            - gradle 6.6
            - python 2.7.17
            - python 3.8.5
            - pip/pip3
            - docker 19.03.12
            - docker-compose 1.26.2
            - aws-cli 2.0.43
            - google cloud sdk 307.0.0
            - heroku 7.42.12
            - chrome 85.0.4183
            - chromedriver 85.0.4183
            - firefox 80.0.0
            - go 1.15
            - leiningen 2.9.4
            - node 12.18.3 (default)
            - node 14.8.0
            - ruby 2.7.1
            - sbt 1.3.13
            - yarn 1.22.4
        working_directory: ~/projects
        environment:
            PIPELINE_ID: << pipeline.id >>
            BRANCH_NAME: << pipeline.git.branch >>
        machine:
            image: ubuntu-2004:202008-01
